@top Document { (entity | DoctypeDecl)+ }

@external grammar elementContent from "./content.js"

entity { Text | EntityReference | CharacterReference | Element | Comment | ProcessingInst }

Element {
  OpenTag nest.elementContent<"</" space* identifier space* ">", entity*> (CloseTag | missingCloseTag) |
  SelfClosingTag
}

OpenTag[closedBy=CloseTag] {
  StartTag space* TagName space* Attribute* EndTag
}

SelfClosingTag {
  StartTag space* TagName space* Attribute* SelfCloseEndTag
}

CloseTag[openedBy=OpenTag] {
  (StartCloseTag space* TagName |
   MismatchedStartCloseTag space* MismatchedTagName)
  space* EndTag
}

Attribute {
  AttributeName space* (Is space* (AttributeValue | UnquotedAttributeValue) space*)?
}

AttributeValue {
  "\"" (attributeContentDouble | EntityReference | CharacterReference)* "\"" |
  "\'" (attributeContentSingle | EntityReference | CharacterReference)* "\'"
}

@export RawText {}

@external tokens tagStart from "./tokens.js" {
  StartTag[closedBy="EndTag SelfCloseEndTag"],
  StartCloseTag[closedBy="EndTag SelfCloseEndTag"],
  MismatchedStartCloseTag[name=StartCloseTag],
  missingCloseTag
}

@external tokens selfClosed from "./tokens.js" {
  SelfCloseEndTag[openedBy="StartTag"]
}

@tokens {
  EndTag[openedBy="StartTag StartCloseTag"] { "/"? ">" }

  nameStart {
    ":" | std.asciiLetter | "_" |
    $[\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D] |
    $[\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u{10000}-\u{EFFFF}]
  }

  nameChar {
    nameStart | "-" | "." | std.digit | $[\u00B7\u0300-\u036F\u203F-\u2040]
  }

  identifier { nameStart nameChar* }

  TagName { identifier }
  
  MismatchedTagName { identifier }

  AttributeName { identifier }

  UnquotedAttributeValue { ![ \t\n\r\u00a0=<>"'/]+ }

  attributeContentDouble { !["&]+ }

  attributeContentSingle { !['&]+ }

  Is { "=" }

  EntityReference { "&" ![#; ]+ ";" }

  CharacterReference { "&#" ![; ]+ ";" }

  Text { ![<&]+ }

  Comment { "<!--" commentContent }

  commentContent { ![\-] commentContent | "-" commentDash1 }
  commentDash1 { ![\-] commentContent | "-" commentDash2 }
  commentDash2 { ![\->] commentContent | "-" commentDash2 | ">" }

  ProcessingInst { "<?" piContent }

  piContent { ![?] piContent | "?" piQuestion }
  piQuestion { ![>] piContent | ">" }

  DoctypeDecl { "<!" ("doctype" | "DOCTYPE") ![>]* ">" }

  @precedence { Comment, ProcessingInst, DoctypeDecl }

  space { (" " | "\t" | "\r" | "\n")+ }
}
