'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var lezer = require('lezer');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const 
  descendantOp = 102,
  Unit = 1,
  callee = 103,
  identifier = 104;

/* Hand-written tokenizers for CSS tokens that can't be
   expressed by Lezer's built-in tokenizer. */

const space = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197,
               8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288];
const colon = 58, parenL = 40, underscore = 95, bracketL = 91, dash = 45, period = 46,
      hash = 35, percent = 37;

function isAlpha(ch) { return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 161 }

function isDigit(ch) { return ch >= 48 && ch <= 57 }

const identifiers = new lezer.ExternalTokenizer((input, token) => {
  let start = token.start, pos = start, inside = false;
  for (;;) {
    let next = input.get(pos);
    if (isAlpha(next) || next == dash || next == underscore || (inside && isDigit(next))) {
      if (!inside && (next != dash || pos > start)) inside = true;
      pos++;
      continue
    }
    if (inside)
      token.accept(next == parenL ? callee : identifier, pos);
    break
  }
});

const descendant = new lezer.ExternalTokenizer((input, token) => {
  if (space.includes(input.get(token.start - 1))) {
    let next = input.get(token.start);
    if (isAlpha(next) || next == underscore || next == hash || next == period ||
        next == bracketL || next == colon || next == dash)
      token.accept(descendantOp, token.start);
  }
});

const unitToken = new lezer.ExternalTokenizer((input, token) => {
  let {start} = token;
  if (!space.includes(input.get(start - 1))) {
    let next = input.get(start);
    if (next == percent) token.accept(Unit, start + 1);
    if (isAlpha(next)) {
      let pos = start + 1;
      while (isAlpha(input.get(pos))) pos++;
      token.accept(Unit, pos);
    }
  }
});

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = lezer.Parser.deserialize({
  states: "7jOVO[OOO!SO[O'#E[OUOO'#Cc'#CcOUOO'#Cb'#CbO#SO[O'#CeO#WOXO'#C`O#tO[O'#CgO$OO[O'#C}O$SO[O'#DROUOO'#El'#ElO$WOdO'#DdO$nO[O'#DqO$WOdO'#DsO%OO[O'#DuO%YO[O'#DxO%^O[O'#EOO%kO[O'#EQOUOO'#Ek'#EkOUOO(3Be(3BeQUOWOOOUOO,5:m,5:mOUOO'#Cf'#CfOUOO,59P,59PO#SO[O,59PO&OOWO'#E]O&YO[O'#ESO&pO[O,59RO$OO[O,59iO$SO[O,59mO&YO[O,59qO&YO[O,59sO&YO[O,59tO&zOWO,58zOUOO'#Ci'#CiOUOO'#Co'#CoOUOO,59R,59RO'OOWO,59RO'SOWO,59ROUOO'#DP'#DPOUOO,59i,59iOUOO'#DT'#DTO'WO`O,59mOUOO'#Cq'#CqO$WOdO'#CrO'_OvO'#CtO(eOtO,5:OOUOO'#Cy'#CyO'SOWO'#CxO(xOWO'#CzOUOO'#Ep'#EpOUOO'#Dg'#DgO(|O[O'#DnO)ZOWO'#ErO%^O[O'#DlO)hOWO'#DoOUOO'#Es'#EsO&zOWO,5:]O)lOpO,5:_OUOO'#Dw'#DwO)sOWO,5:aO)wO[O,5:aOUOO'#Dz'#DzO*OOWO,5:dO*SOWO,5:jO*ZOWO,5:lOUOO1G.k1G.kOUOO,5:n,5:nO*bOXO-E8QOUOO1G.m1G.mO'OOWO1G.mO'SOWO1G.mOUOO1G/T1G/TO+RO`O1G/XO+YOXO1G/]O+yOXO1G/_O,jOXO1G/`O-ZO[O'#D^OUOO1G.f1G.fO.^O[O'#CmO.wOdO'#CpOUOO1G/X1G/XO$WOdO1G/XO/bOpO,59^OUOO,59`,59`O$WOdO,59bO/iOWO1G/jOUOO,59d,59dO/mO!bO,59fO/tO`O'#DgO0OO`O,5:SO0SOWO,5:YO%^O[O,5:UO0ZOWO'#EcO%^O[O'#EYOUOO,5;^,5;^O0eOWO,5:WO&YO[O,5:ZOUOO1G/w1G/wOUOO1G/y1G/yOUOO1G/{1G/{O0uOWO1G/{O0yOdO'#D{OUOO1G0O1G0OOUOO1G0U1G0UOUOO1G0W1G0WOUOO7+$X7+$XOUOO7+$s7+$sO$WOdO7+$sO1WO[O'#E`OUOO(3Bi(3BiO2ZO[O,59xO2bOXO'#EnO3OOWO,59XO3SOdO'#E^O3pOtO(3BgO4aOWO'#EoO4hOWO,59[O4lOpO7+$sOUOO1G.x1G.xOUOO1G.|1G.|OUOO7+%U7+%UO4sOWO1G/QO$WOdO1G/nOUOO1G/t1G/tOUOO1G/p1G/pOUOO,5:t,5:tO4wOWO-E8WO5UOXO1G/uOUOO7+%g7+%gO5oOYO'#CtO5vOdO'#EdO&zOWO'#EZO6TOWO,5:gO6XOpO<<H_OUOO,5:q,5:qOUOO'#D`'#D`O6`O`O'#D_OUOO1G/d1G/dO6dOWO1G/dOUOO,5;Y,5;YOUOO1G.s1G.sOUOO,5:o,5:oO6kOWO'#E_O$WOdO'#EUOUOO,5;Z,5;ZOUOO1G.v1G.vOUOO<<H_<<H_OUOO7+$l7+$lO6rOWO7+%YOUOO7+%a7+%aOUOO,5:u,5:uOUOO-E8X-E8XOUOO1G0R1G0ROUOOAN=yAN=yO$WOdO,59yO6vOWO'#EbO6}O[O'#EXO8TOWO7+%OOUOO,5:p,5:pOUOO-E8S-E8SOUOO<<Ht<<HtO8XOtO1G/eOUOO,5:s,5:sO9OO[O-E8VOUOO<<Hj<<HjO9YOtO(3BjO:POdO'#EaO$WOdO'#EWO:sOWO7+%POUOO3)-q3)-qOUOO,5:r,5:rO:}OtO-E8UOUOO<<Hk<<Hk",
  stateData: "<PQOS#^OS~TXOWXO[UOrVOvWO!X`O!YYO!fZO!h[O!j]O!m^O!s_O#[QO#aSO~TXOWXO[UOrVOvWO!X`O!YYO!fZO!h[O!j]O!m^O!s_O#[QO#aSO#X#OX~#[eO~[jObiOrkOvlOzmO}oO#YnO#agO!P#PP~^tO#ZrO#[qO~#[vO~#[xO~`{Og!ROi!ROo!QO#Z!OO#[zO#e|O~`!TO!a!VO!d!WO#[!SO!P#fP~i!]Oo!QO#[![O~#[!_O~`!TO!a!VO!d!WO#[!SO~`!TO!a!VO!d!WO#[!SO!P#fP!V#fP~biO!P#PX_#PX~TXOWXO[UOrVOvWO#[QO#aSO~^!gO#ZrO#[qO~!P!nO~`!pO~`!qO~t!rOx!sO~P!uO`hXkhX!VhX!ahX!dhX#[hX_hXbhXghXihXohX#ZhX#ehXthX!OhX!UhX~`!TOk!vO!a!VO!d!WO#[!SO!V#fP~`!yO~`!TO!a!VO!d!WO#[!zO~b#PO!_!}O!P#VP!V#VP~`#SO~k!vO!V#UO~!V#VO~i#WOo!QO~!P#XO~!P!nO!_!}O~!P!nO!V#[O~[jOrkOvlOzmO}oO#YnO#agOb!vc!P!vc_!vc~t#^Ox#_O~[jOrkOvlO#agObyizyi}yi!Pyi#Yyi_yi~[jOrkOvlO#agOb{iz{i}{i!P{i#Y{i_{i~[jOrkOvlO#agOb|iz|i}|i!P|i#Y|i_|i~TXOWXO[UOrVOvWO!X`O!YYO!fZO!h[O!j]O!m^O!s_O#[QO#aSO!O#SP#[#SP~TXOWXO[UOrVOvWO#[QO#aSO_#bP~`{Og!ROi!ROo!QO#Z!OO#[zO#e|O_#cP~_#jOk!vO~!V#lO~i#mOp#mO~_!ZX!T!]X!_!ZX~!T#nO~_#oO!_!}O~b#PO!P#VX!V#VX~!_!}Ob!`a!P!`a!V!`a_!`a~!V#tO~!p#wO!q#wO#e#uO!O#WP~TXOWXO[UOrVOvWO!X`O!YYO!fZO!h[O!j]O!m^O!s_O#[QO#aSO!O#SX!V#SX~!O#}O#[#{O~[jObiOrkOvlOzmO}oO#YnO#agO_#PP~_$QO~`{Og!ROi!ROo!QO#Z!OO#[zO#e|O_#QXb#QX~k!vO_!wZ`!wZb!wZg!wZi!wZo!wZ#Z!wZ#[!wZ#e!wZ~b$TO_#RP~_$VO~k!vOt$WO~_$XO~!_!}Ob!|c!P!|c!V!|c~[jO_$ZOrkOvlOzmO}oO#YnO#agO~P!uO!PhX~!p#wO!q#wO#e#uO!O#WX~!O$^O~k!vOt$_O~!T$`O~!V$bO!O#UP~b$TO_#RX~_$fO~!V$bO!O#UX~TXOWXO[UOrVOvWO!X`O!YYO!fZO!h[O!j]O!m^O!s_O#[QO#aSO!O#SP!V#SP#[#SP~!O$jO~`{Ob$mOg!ROi!ROk!vOo!QO#Z!OO#[zO#e|O!O#TP!U#TP!V#TP~#[#{O!O!{c!V!{c~k!vO`!zZb!zZg!zZi!zZo!zZ!O!zZ!U!zZ!V!zZ#Z!zZ#[!zZ#e!zZ~`{Ob$mOg!ROi!ROo!QO#Z!OO#[zO#e|O!O#TX!U#TX!V#TX~!U$rO!O!Rq!V!Rq~k!vO`!zcb!zcg!zci!zco!zc!O!zc!U!zc!V!zc#Z!zc#[!zc#e!zc~#^pQ#ek}~#Z!X#[~",
  goto: ",Y#hPPPP#iP#p#}P#p$[#pP$bPPP$hP$n$t$}$}P%_P$}P$}%s&TPP#pP&kP#pP&qP#pP#p#pPPP&w'W'^PPP#iPP'b'b'l'bP'bP'b'bP#iP#iP#iP'o#iP'r'uPP#iP#i'x(O(V(_(e(l(r(x)O)U)X)_)h)k)q)t)w)zPPPPPP)}*WP*q*t*wP+k+tZaOP!n#`$bgXOPimno!n!p#S#`$bgROPimno!n!p#S#`$bQfSR!cgQsUR!fjQ!ftR#]!gQuUR!hjQ!fuQ!x!PR#]!hm!RY[{!q!s!v#_#e#n$T$`$g$l$ml!RY[{!q!s!v#_#e#n$T$`$g$l$mT#w#X#vm!PY[{!q!s!v#_#e#n$T$`$g$l$ml!RY[{!q!s!v#_#e#n$T$`$g$l$mQ!]]R#W!^QwVR!ikQyWR!jlQ!opQ#T!YQ#Z!aQ#[!bR$]#wQ$O#bR$o$iT#|#b$ia!XZ_`}!T!V!}#PR!{!TR!^]R!`^R#Y!`QPORdPShT#cR!dhU#e!q#n$TR$R#eQ$S#gR$d$SS#`!n$bR#z#`Q$l$gR$p$lQ$a$OR$h$aQ#O!UR#q#OQ#v#XR$[#vRcOQpTR$P#cQ#g!qQ$Y#nR$e$TR$U#gQ#b!nR$i$bR$n$gR$c$OR#Q!UR#x#XSbOPV#a!n#`$bYTOP!n#`$bQ!eiQ!kmQ!lnQ!moQ#c!pR#s#SR#d!pR#h!qQ}YQ!Z[Q!t{W#f!q#e#n$TQ#i!sQ#k!vQ#y#_Q$g$`S$k$g$lR$q$mQ!YZQ!b`R!w}U!UZ`}Q!a_Q!|!TQ#R!VQ#p!}R#r#P",
  nodeNames: "âš  Unit Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector ClassName PseudoClassSelector PseudoOp PseudoClassName not ) ( ArgList , PseudoClassName ArgList ValueName ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee CallLiteral CallTag ParenthesizedContent IdSelector # IdName ] AttributeSelector [ AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp } { Block Declaration PropertyName : Important ; ImportStatement AtKeyword import KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery callee MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList from to SupportsStatement supports AtRule",
  nodeProps: [
    [lezer.NodeProp.top, 3,true],
    [lezer.NodeProp.openedBy, 15,"(",46,"{"],
    [lezer.NodeProp.closedBy, 16,")",47,"}"]
  ],
  repeatNodeCount: 9,
  tokenData: "Bl~R![OX$wX^%]^p$wpq%]qr(crs+}st,otu2Uuv$wvw2rwx2}xy3jyz3uz{3z{|4_|}8u}!O9Q!O!P9i!P!Q9z!Q![<U![!]<y!]!^=k!^!_$w!_!`=v!`!a>R!a!b$w!b!c>q!c!}$w!}#O?}#O#P$w#P#Q@Y#Q#R2U#R#T$w#T#U@e#U#c$w#c#dAd#d#o$w#o#pAs#p#q2U#q#rBO#r#sBZ#s#y$w#y#z%]#z$f$w$f$g%]$g#BY$w#BY#BZ%]#BZ$IS$w$IS$I_%]$I_$I|$w$I|$JO%]$JO$JT$w$JT$JU%]$JU$KV$w$KV$KW%]$KW&FU$w&FU&FV%]&FV~$wW$zQOy%Qz~%QW%VQpWOy%Qz~%Q~%bf#^~OX%QX^&v^p%Qpq&vqy%Qz#y%Q#y#z&v#z$f%Q$f$g&v$g#BY%Q#BY#BZ&v#BZ$IS%Q$IS$I_&v$I_$I|%Q$I|$JO&v$JO$JT%Q$JT$JU&v$JU$KV%Q$KV$KW&v$KW&FU%Q&FU&FV&v&FV~%Q~&}f#^~pWOX%QX^&v^p%Qpq&vqy%Qz#y%Q#y#z&v#z$f%Q$f$g&v$g#BY%Q#BY#BZ&v#BZ$IS%Q$IS$I_&v$I_$I|%Q$I|$JO&v$JO$JT%Q$JT$JU&v$JU$KV%Q$KV$KW&v$KW&FU%Q&FU&FV&v&FV~%Q_(fSOy%Qz#]%Q#]#^(r#^~%Q_(wSpWOy%Qz#a%Q#a#b)T#b~%Q_)YSpWOy%Qz#d%Q#d#e)f#e~%Q_)kSpWOy%Qz#c%Q#c#d)w#d~%Q_)|SpWOy%Qz#f%Q#f#g*Y#g~%Q_*_SpWOy%Qz#h%Q#h#i*k#i~%Q_*pSpWOy%Qz#T%Q#T#U*|#U~%Q_+RSpWOy%Qz#b%Q#b#c+_#c~%Q_+dSpWOy%Qz#h%Q#h#i+p#i~%Q_+wQ!UVpWOy%Qz~%Q~,QUOY+}Zr+}rs,ds#O+}#O#P,i#P~+}~,iOi~~,lPO~+}_,tWrPOy%Qz!Q%Q!Q![-^![!c%Q!c!i-^!i#T%Q#T#Z-^#Z~%Q^-cWpWOy%Qz!Q%Q!Q![-{![!c%Q!c!i-{!i#T%Q#T#Z-{#Z~%Q^.QWpWOy%Qz!Q%Q!Q![.j![!c%Q!c!i.j!i#T%Q#T#Z.j#Z~%Q^.qWgUpWOy%Qz!Q%Q!Q![/Z![!c%Q!c!i/Z!i#T%Q#T#Z/Z#Z~%Q^/bWgUpWOy%Qz!Q%Q!Q![/z![!c%Q!c!i/z!i#T%Q#T#Z/z#Z~%Q^0PWpWOy%Qz!Q%Q!Q![0i![!c%Q!c!i0i!i#T%Q#T#Z0i#Z~%Q^0pWgUpWOy%Qz!Q%Q!Q![1Y![!c%Q!c!i1Y!i#T%Q#T#Z1Y#Z~%Q^1_WpWOy%Qz!Q%Q!Q![1w![!c%Q!c!i1w!i#T%Q#T#Z1w#Z~%Q^2OQgUpWOy%Qz~%QY2XSOy%Qz!_%Q!_!`2e!`~%QY2lQxQpWOy%Qz~%QX2wQWPOy%Qz~%Q~3QUOY2}Zw2}wx,dx#O2}#O#P3d#P~2}~3gPO~2}_3oQ`VOy%Qz~%Q~3zO_~_4RSTPkSOy%Qz!_%Q!_!`2e!`~%Q_4fUkS}POy%Qz!O%Q!O!P4x!P!Q%Q!Q![7_![~%Q^4}SpWOy%Qz!Q%Q!Q![5Z![~%Q^5bWpW#eUOy%Qz!Q%Q!Q![5Z![!g%Q!g!h5z!h#X%Q#X#Y5z#Y~%Q^6PWpWOy%Qz{%Q{|6i|}%Q}!O6i!O!Q%Q!Q![6z![~%Q^6nSpWOy%Qz!Q%Q!Q![6z![~%Q^7RSpW#eUOy%Qz!Q%Q!Q![6z![~%Q^7fYpW#eUOy%Qz!O%Q!O!P8U!P!Q%Q!Q![7_![!g%Q!g!h5z!h#X%Q#X#Y5z#Y~%Q^8]WpW#eUOy%Qz!Q%Q!Q![8U![!g%Q!g!h5z!h#X%Q#X#Y5z#Y~%Q_8zQbVOy%Qz~%Q^9VUkSOy%Qz!O%Q!O!P4x!P!Q%Q!Q![7_![~%Q_9nS#aPOy%Qz!Q%Q!Q![5Z![~%Q~:PRkSOy%Qz{:Y{~%Q~:_SpWOy:Yyz:kz{;`{~:Y~:nROz:kz{:w{~:k~:zTOz:kz{:w{!P:k!P!Q;Z!Q~:k~;`OQ~~;eUpWOy:Yyz:kz{;`{!P:Y!P!Q;w!Q~:Y~<OQpWQ~Oy%Qz~%Q^<ZY#eUOy%Qz!O%Q!O!P8U!P!Q%Q!Q![7_![!g%Q!g!h5z!h#X%Q#X#Y5z#Y~%QZ=QS!TQ[POy%Qz![%Q![!]=^!]~%QX=eQ[PpWOy%Qz~%Q_=pQ!VVOy%Qz~%QY={QxQOy%Qz~%QX>WSzPOy%Qz!`%Q!`!a>d!a~%QX>kQzPpWOy%Qz~%QX>tUOy%Qz!c%Q!c!}?W!}#T%Q#T#o?W#o~%QX?_Y!XPpWOy%Qz}%Q}!O?W!O!Q%Q!Q![?W![!c%Q!c!}?W!}#T%Q#T#o?W#o~%QX@SQvPOy%Qz~%Q^@_QtUOy%Qz~%QZ@hSOy%Qz#b%Q#b#c@t#c~%QZ@ySpWOy%Qz#W%Q#W#XAV#X~%QZA^Q!_RpWOy%Qz~%QZAgSOy%Qz#f%Q#f#gAV#g~%QXAxQ!PPOy%Qz~%Q_BTQ!OVOy%Qz~%QZB`S}POy%Qz!_%Q!_!`2e!`~%Q",
  tokenizers: [descendant, unitToken, identifiers, 0, 1, 2, 3],
  topRules: {"StyleSheet":[0,3]},
  specializeTable: 1239,
  specializations: [{not:28, url:62, "url-prefix":62, domain:62, regexp:62, selector:132},
   {"@import":112, "@media":136, "@charset":140, "@namespace":144, "@keyframes":150, "@supports":162},
   {not:126, only:126, from:156, to:158}],
  tokenPrec: 1232
});

exports.parser = parser;
