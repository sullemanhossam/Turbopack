import { Tree, NodeProp } from "lezer-tree";
import { Line } from "@codemirror/next/text";
import { EditorState } from "./state";
import { Transaction, TransactionSpec, StrictTransactionSpec } from "./transaction";
import { Facet } from "./facet";
export declare type StateCommand = (target: {
    state: EditorState;
    dispatch: (transaction: Transaction) => void;
}) => boolean;
export declare const allowMultipleSelections: Facet<boolean, boolean>;
export declare const changeFilter: Facet<(tr: StrictTransactionSpec, state: EditorState) => boolean | readonly number[], readonly ((tr: StrictTransactionSpec, state: EditorState) => boolean | readonly number[])[]>;
export declare const transactionFilter: Facet<(tr: StrictTransactionSpec, oldState: EditorState, finish: () => Transaction) => TransactionSpec | readonly TransactionSpec[], readonly ((tr: StrictTransactionSpec, oldState: EditorState, finish: () => Transaction) => TransactionSpec | readonly TransactionSpec[])[]>;
export declare const languageDataProp: NodeProp<Facet<{
    [name: string]: any;
}, readonly {
    [name: string]: any;
}[]>>;
export declare const globalLanguageData: Facet<{
    [name: string]: any;
}, readonly {
    [name: string]: any;
}[]>;
export interface Syntax {
    getTree(state: EditorState): Tree;
    parsePos(state: EditorState): number;
    ensureTree(state: EditorState, upto: number, timeout?: number): Tree | null;
    languageData: Facet<{
        [name: string]: any;
    }>;
    languageDataFacetAt(state: EditorState, pos: number): Facet<{
        [name: string]: any;
    }>;
}
export declare class IndentContext {
    readonly state: EditorState;
    constructor(state: EditorState, overrideIndentation?: ((pos: number) => number) | undefined, simulateBreak?: number | undefined);
    get unit(): number;
    textAfterPos(pos: number): string;
    countColumn(line: string, pos: number): number;
    lineIndent(line: Line): number;
    column(pos: number): number;
}
//# sourceMappingURL=extension.d.ts.map