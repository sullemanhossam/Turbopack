import { StringStream } from "./stringstream";
import { EditorState, Syntax, Extension, Facet } from "@codemirror/next/state";
import { Tree, NodeProp } from "lezer-tree";
export { StringStream };
export declare type StreamParser<State> = {
    token(stream: StringStream, state: State, editorState: EditorState): string | null;
    blankLine?(state: State, editorState: EditorState): void;
    startState?(editorState: EditorState): State;
    copyState?(state: State): State;
    indent?(state: State, textAfter: string, editorState: EditorState): number;
    docProps?: readonly [NodeProp<any>, any][];
};
export declare class StreamSyntax implements Syntax {
    private field;
    extension: Extension;
    private parser;
    languageData: Facet<{
        [name: string]: any;
    }>;
    constructor(parser: StreamParser<any>);
    getTree(state: EditorState): Tree;
    parsePos(state: EditorState): number;
    ensureTree(state: EditorState, upto: number, timeout?: number): Tree | null;
    languageDataFacetAt(): Facet<{
        [name: string]: any;
    }, readonly {
        [name: string]: any;
    }[]>;
}
//# sourceMappingURL=stream-syntax.d.ts.map