{"version":3,"file":"index.js","sources":["../src/python.js"],"sourcesContent":["import { parser } from \"lezer-python\";\nimport { continuedIndent, indentNodeProp, foldNodeProp, LezerSyntax } from \"@codemirror/next/syntax\";\nimport { styleTags } from \"@codemirror/next/highlight\";\n/// A syntax provider based on the [Lezer Python\n/// parser](https://github.com/lezer-parser/python), extended with\n/// highlighting and indentation information.\nexport const pythonSyntax = new LezerSyntax(parser.withProps(indentNodeProp.add({\n    Body: continuedIndent()\n}), foldNodeProp.add({\n    Body(tree) { return { from: tree.start + 1, to: tree.end - 1 }; },\n    ArrayExpression(tree) { return { from: tree.start + 1, to: tree.end - 1 }; },\n    DictionaryExpression(tree) { return { from: tree.start + 1, to: tree.end - 1 }; }\n}), styleTags({\n    \"async * ** FormatConversion\": \"modifier\",\n    \"for while if elif else try except finally return raise break continue with pass assert await yield\": \"keyword control\",\n    \"in not and or is del\": \"operatorKeyword\",\n    \"import from def class global nonlocal lambda\": \"keyword definition\",\n    \"with as print\": \"keyword\",\n    self: \"self\",\n    Boolean: \"atom\",\n    None: \"null\",\n    VariableName: \"variableName\",\n    PropertyName: \"propertyName\",\n    Comment: \"lineComment\",\n    Number: \"number\",\n    String: \"string\",\n    FormatString: \"string#2\",\n    UpdateOp: \"updateOperator\",\n    ArithOp: \"arithmeticOperator\",\n    BitOp: \"bitwiseOperator\",\n    CompareOp: \"compareOperator\",\n    AssignOp: \"operator definition\",\n    Ellipsis: \"punctuation\",\n    At: \"punctuation meta\",\n    \"( )\": \"paren\",\n    \"[ ]\": \"squareBracket\",\n    \"{ }\": \"brace\",\n    \".\": \"derefOperator\",\n    \", ;\": \"separator\"\n})), {\n    languageData: {\n        closeBrackets: { brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"'''\", '\"\"\"'] },\n        commentTokens: { line: \"#\" }\n    }\n});\n/// Returns an extension that installs the Python syntax provider.\nexport function python() {\n    return pythonSyntax;\n}\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AACY,MAAC,YAAY,GAAG,IAAI,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,GAAG,CAAC;AAChF,IAAI,IAAI,EAAE,eAAe,EAAE;AAC3B,CAAC,CAAC,EAAE,YAAY,CAAC,GAAG,CAAC;AACrB,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,EAAE;AACrE,IAAI,eAAe,CAAC,IAAI,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,EAAE;AAChF,IAAI,oBAAoB,CAAC,IAAI,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,EAAE;AACrF,CAAC,CAAC,EAAE,SAAS,CAAC;AACd,IAAI,6BAA6B,EAAE,UAAU;AAC7C,IAAI,oGAAoG,EAAE,iBAAiB;AAC3H,IAAI,sBAAsB,EAAE,iBAAiB;AAC7C,IAAI,8CAA8C,EAAE,oBAAoB;AACxE,IAAI,eAAe,EAAE,SAAS;AAC9B,IAAI,IAAI,EAAE,MAAM;AAChB,IAAI,OAAO,EAAE,MAAM;AACnB,IAAI,IAAI,EAAE,MAAM;AAChB,IAAI,YAAY,EAAE,cAAc;AAChC,IAAI,YAAY,EAAE,cAAc;AAChC,IAAI,OAAO,EAAE,aAAa;AAC1B,IAAI,MAAM,EAAE,QAAQ;AACpB,IAAI,MAAM,EAAE,QAAQ;AACpB,IAAI,YAAY,EAAE,UAAU;AAC5B,IAAI,QAAQ,EAAE,gBAAgB;AAC9B,IAAI,OAAO,EAAE,oBAAoB;AACjC,IAAI,KAAK,EAAE,iBAAiB;AAC5B,IAAI,SAAS,EAAE,iBAAiB;AAChC,IAAI,QAAQ,EAAE,qBAAqB;AACnC,IAAI,QAAQ,EAAE,aAAa;AAC3B,IAAI,EAAE,EAAE,kBAAkB;AAC1B,IAAI,KAAK,EAAE,OAAO;AAClB,IAAI,KAAK,EAAE,eAAe;AAC1B,IAAI,KAAK,EAAE,OAAO;AAClB,IAAI,GAAG,EAAE,eAAe;AACxB,IAAI,KAAK,EAAE,WAAW;AACtB,CAAC,CAAC,CAAC,EAAE;AACL,IAAI,YAAY,EAAE;AAClB,QAAQ,aAAa,EAAE,EAAE,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,EAAE;AAC5E,QAAQ,aAAa,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE;AACpC,KAAK;AACL,CAAC,EAAE;AACH;AACO,SAAS,MAAM,GAAG;AACzB,IAAI,OAAO,YAAY,CAAC;AACxB;;;;"}