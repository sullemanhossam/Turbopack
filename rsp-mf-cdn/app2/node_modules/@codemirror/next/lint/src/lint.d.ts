import { EditorView, Command, KeyBinding } from "@codemirror/next/view";
import { Extension, TransactionSpec, EditorState } from "@codemirror/next/state";
export interface Diagnostic {
    from: number;
    to: number;
    severity: "info" | "warning" | "error";
    source?: string;
    message: string;
    actions?: readonly Action[];
}
export interface Action {
    name: string;
    apply: (view: EditorView, from: number, to: number) => void;
}
export declare function setDiagnostics(state: EditorState, diagnostics: readonly Diagnostic[]): TransactionSpec;
export declare const openLintPanel: Command;
export declare const closeLintPanel: Command;
export declare const nextDiagnostic: Command;
export declare const lintKeymap: readonly KeyBinding[];
export declare function linter(source: (view: EditorView) => readonly Diagnostic[] | Promise<readonly Diagnostic[]>): Extension;
//# sourceMappingURL=lint.d.ts.map