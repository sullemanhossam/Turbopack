import { SpanIterator } from "@codemirror/next/rangeset";
import { DecorationSet, Decoration } from "./decoration";
import { BlockView, LineView, BlockWidgetView } from "./blockview";
import { Text, TextIterator } from "@codemirror/next/text";
export declare const enum Open {
    Start = 1,
    End = 2
}
export declare class ContentBuilder implements SpanIterator<Decoration> {
    private doc;
    pos: number;
    end: number;
    content: BlockView[];
    curLine: LineView | null;
    breakAtStart: number;
    cursor: TextIterator;
    text: string;
    skip: number;
    textOff: number;
    constructor(doc: Text, pos: number, end: number);
    posCovered(): boolean;
    getLine(): LineView;
    addWidget(view: BlockWidgetView): void;
    finish(): void;
    buildText(length: number, tagName: string | null, clss: string | null, attrs: {
        [key: string]: string;
    } | null, _ranges: Decoration[]): void;
    span(from: number, to: number, active: Decoration[]): void;
    point(from: number, to: number, deco: Decoration, openStart: boolean, openEnd: boolean): void;
    static build(text: Text, from: number, to: number, decorations: readonly DecorationSet[]): {
        content: BlockView[];
        breakAtStart: number;
    };
}
//# sourceMappingURL=buildview.d.ts.map