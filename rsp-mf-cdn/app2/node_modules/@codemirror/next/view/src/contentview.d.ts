import { Text } from "@codemirror/next/text";
import { Rect } from "./dom";
import { EditorView } from "./editorview";
export declare const enum Dirty {
    Not = 0,
    Child = 1,
    Node = 2
}
export declare class DOMPos {
    readonly node: Node;
    readonly offset: number;
    readonly precise: boolean;
    constructor(node: Node, offset: number, precise?: boolean);
    static before(dom: Node, precise?: boolean): DOMPos;
    static after(dom: Node, precise?: boolean): DOMPos;
}
export declare abstract class ContentView {
    parent: ContentView | null;
    dom: Node | null;
    dirty: number;
    abstract length: number;
    abstract children: ContentView[];
    breakAfter: number;
    get editorView(): EditorView;
    get overrideDOMText(): Text | null;
    get posAtStart(): number;
    get posAtEnd(): number;
    posBefore(view: ContentView): number;
    posAfter(view: ContentView): number;
    coordsAt(_pos: number, _side: number): Rect | null;
    sync(): void;
    reuseDOM(_dom: Node): boolean;
    abstract domAtPos(pos: number): DOMPos;
    localPosFromDOM(node: Node, offset: number): number;
    domBoundsAround(from: number, to: number, offset?: number): {
        startDOM: Node | null;
        endDOM: Node | null;
        from: number;
        to: number;
    } | null;
    markDirty(andParent?: boolean): void;
    markParentsDirty(childList: boolean): void;
    setParent(parent: ContentView): void;
    setDOM(dom: Node): void;
    get rootView(): ContentView;
    replaceChildren(from: number, to: number, children?: ContentView[]): void;
    ignoreMutation(_rec: MutationRecord): boolean;
    ignoreEvent(_event: Event): boolean;
    childCursor(pos?: number): ChildCursor;
    childPos(pos: number, bias?: number): {
        i: number;
        off: number;
    };
    toString(): string;
    static get(node: Node): ContentView | null;
}
export declare class ChildCursor {
    children: readonly ContentView[];
    pos: number;
    i: number;
    off: number;
    constructor(children: readonly ContentView[], pos: number, i: number);
    findPos(pos: number, bias?: number): this;
}
//# sourceMappingURL=contentview.d.ts.map