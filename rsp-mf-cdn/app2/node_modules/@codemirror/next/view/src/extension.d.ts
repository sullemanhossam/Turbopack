import { EditorState, Transaction, ChangeSet, Facet, Extension } from "@codemirror/next/state";
import { StyleModule } from "style-mod";
import { DecorationSet } from "./decoration";
import { EditorView } from "./editorview";
import { Attrs } from "./attributes";
import { Rect } from "./dom";
import { MakeSelectionStyle } from "./input";
export declare type Command = (target: EditorView) => boolean;
export declare const clickAddsSelectionRange: Facet<(event: MouseEvent) => boolean, readonly ((event: MouseEvent) => boolean)[]>;
export declare const dragMovesSelection: Facet<(event: MouseEvent) => boolean, readonly ((event: MouseEvent) => boolean)[]>;
export declare const mouseSelectionStyle: Facet<MakeSelectionStyle, readonly MakeSelectionStyle[]>;
export declare const exceptionSink: Facet<(exception: any) => void, readonly ((exception: any) => void)[]>;
export declare const updateListener: Facet<(update: ViewUpdate) => void, readonly ((update: ViewUpdate) => void)[]>;
export declare function logException(state: EditorState, exception: any, context?: string): void;
export declare const editable: Facet<boolean, boolean>;
export interface PluginValue {
    update?(_update: ViewUpdate): void;
    destroy?(): void;
}
export declare class PluginField<T> {
    static define<T>(): PluginField<T>;
    static scrollMargins: PluginField<Partial<Rect> | null>;
}
export declare const viewPlugin: Facet<ViewPlugin<any>, readonly ViewPlugin<any>[]>;
export declare class ViewPlugin<T extends PluginValue> {
    extension: Extension;
    private constructor();
    static define<T extends PluginValue>(create: (view: EditorView) => T): ViewPlugin<T>;
    static fromClass<T extends PluginValue>(cls: {
        new (view: EditorView): T;
    }): ViewPlugin<T>;
    provide<V>(field: PluginField<V>, get: (plugin: T) => V): ViewPlugin<T>;
    decorations<V extends {
        decorations: DecorationSet;
    } & PluginValue>(this: ViewPlugin<V>): ViewPlugin<T>;
    decorations(get: (plugin: T) => DecorationSet): ViewPlugin<T>;
    eventHandlers(handlers: {
        [Type in keyof HTMLElementEventMap]?: (this: T, event: HTMLElementEventMap[Type], view: EditorView) => boolean;
    }): ViewPlugin<T>;
}
export declare const pluginDecorations: PluginField<DecorationSet>;
export declare const domEventHandlers: PluginField<{
    plugin: PluginValue;
    handlers: {
        fullscreenchange?: ((event: Event, view: EditorView) => boolean) | undefined;
        fullscreenerror?: ((event: Event, view: EditorView) => boolean) | undefined;
        abort?: ((event: UIEvent, view: EditorView) => boolean) | undefined;
        animationcancel?: ((event: AnimationEvent, view: EditorView) => boolean) | undefined;
        animationend?: ((event: AnimationEvent, view: EditorView) => boolean) | undefined;
        animationiteration?: ((event: AnimationEvent, view: EditorView) => boolean) | undefined;
        animationstart?: ((event: AnimationEvent, view: EditorView) => boolean) | undefined;
        auxclick?: ((event: MouseEvent, view: EditorView) => boolean) | undefined;
        blur?: ((event: FocusEvent, view: EditorView) => boolean) | undefined;
        cancel?: ((event: Event, view: EditorView) => boolean) | undefined;
        canplay?: ((event: Event, view: EditorView) => boolean) | undefined;
        canplaythrough?: ((event: Event, view: EditorView) => boolean) | undefined;
        change?: ((event: Event, view: EditorView) => boolean) | undefined;
        click?: ((event: MouseEvent, view: EditorView) => boolean) | undefined;
        close?: ((event: Event, view: EditorView) => boolean) | undefined;
        contextmenu?: ((event: MouseEvent, view: EditorView) => boolean) | undefined;
        cuechange?: ((event: Event, view: EditorView) => boolean) | undefined;
        dblclick?: ((event: MouseEvent, view: EditorView) => boolean) | undefined;
        drag?: ((event: DragEvent, view: EditorView) => boolean) | undefined;
        dragend?: ((event: DragEvent, view: EditorView) => boolean) | undefined;
        dragenter?: ((event: DragEvent, view: EditorView) => boolean) | undefined;
        dragexit?: ((event: Event, view: EditorView) => boolean) | undefined;
        dragleave?: ((event: DragEvent, view: EditorView) => boolean) | undefined;
        dragover?: ((event: DragEvent, view: EditorView) => boolean) | undefined;
        dragstart?: ((event: DragEvent, view: EditorView) => boolean) | undefined;
        drop?: ((event: DragEvent, view: EditorView) => boolean) | undefined;
        durationchange?: ((event: Event, view: EditorView) => boolean) | undefined;
        emptied?: ((event: Event, view: EditorView) => boolean) | undefined;
        ended?: ((event: Event, view: EditorView) => boolean) | undefined;
        error?: ((event: ErrorEvent, view: EditorView) => boolean) | undefined;
        focus?: ((event: FocusEvent, view: EditorView) => boolean) | undefined;
        focusin?: ((event: FocusEvent, view: EditorView) => boolean) | undefined;
        focusout?: ((event: FocusEvent, view: EditorView) => boolean) | undefined;
        gotpointercapture?: ((event: PointerEvent, view: EditorView) => boolean) | undefined;
        input?: ((event: Event, view: EditorView) => boolean) | undefined;
        invalid?: ((event: Event, view: EditorView) => boolean) | undefined;
        keydown?: ((event: KeyboardEvent, view: EditorView) => boolean) | undefined;
        keypress?: ((event: KeyboardEvent, view: EditorView) => boolean) | undefined;
        keyup?: ((event: KeyboardEvent, view: EditorView) => boolean) | undefined;
        load?: ((event: Event, view: EditorView) => boolean) | undefined;
        loadeddata?: ((event: Event, view: EditorView) => boolean) | undefined;
        loadedmetadata?: ((event: Event, view: EditorView) => boolean) | undefined;
        loadstart?: ((event: Event, view: EditorView) => boolean) | undefined;
        lostpointercapture?: ((event: PointerEvent, view: EditorView) => boolean) | undefined;
        mousedown?: ((event: MouseEvent, view: EditorView) => boolean) | undefined;
        mouseenter?: ((event: MouseEvent, view: EditorView) => boolean) | undefined;
        mouseleave?: ((event: MouseEvent, view: EditorView) => boolean) | undefined;
        mousemove?: ((event: MouseEvent, view: EditorView) => boolean) | undefined;
        mouseout?: ((event: MouseEvent, view: EditorView) => boolean) | undefined;
        mouseover?: ((event: MouseEvent, view: EditorView) => boolean) | undefined;
        mouseup?: ((event: MouseEvent, view: EditorView) => boolean) | undefined;
        pause?: ((event: Event, view: EditorView) => boolean) | undefined;
        play?: ((event: Event, view: EditorView) => boolean) | undefined;
        playing?: ((event: Event, view: EditorView) => boolean) | undefined;
        pointercancel?: ((event: PointerEvent, view: EditorView) => boolean) | undefined;
        pointerdown?: ((event: PointerEvent, view: EditorView) => boolean) | undefined;
        pointerenter?: ((event: PointerEvent, view: EditorView) => boolean) | undefined;
        pointerleave?: ((event: PointerEvent, view: EditorView) => boolean) | undefined;
        pointermove?: ((event: PointerEvent, view: EditorView) => boolean) | undefined;
        pointerout?: ((event: PointerEvent, view: EditorView) => boolean) | undefined;
        pointerover?: ((event: PointerEvent, view: EditorView) => boolean) | undefined;
        pointerup?: ((event: PointerEvent, view: EditorView) => boolean) | undefined;
        progress?: ((event: ProgressEvent<EventTarget>, view: EditorView) => boolean) | undefined;
        ratechange?: ((event: Event, view: EditorView) => boolean) | undefined;
        reset?: ((event: Event, view: EditorView) => boolean) | undefined;
        resize?: ((event: UIEvent, view: EditorView) => boolean) | undefined;
        scroll?: ((event: Event, view: EditorView) => boolean) | undefined;
        securitypolicyviolation?: ((event: SecurityPolicyViolationEvent, view: EditorView) => boolean) | undefined;
        seeked?: ((event: Event, view: EditorView) => boolean) | undefined;
        seeking?: ((event: Event, view: EditorView) => boolean) | undefined;
        select?: ((event: Event, view: EditorView) => boolean) | undefined;
        selectionchange?: ((event: Event, view: EditorView) => boolean) | undefined;
        selectstart?: ((event: Event, view: EditorView) => boolean) | undefined;
        stalled?: ((event: Event, view: EditorView) => boolean) | undefined;
        submit?: ((event: Event, view: EditorView) => boolean) | undefined;
        suspend?: ((event: Event, view: EditorView) => boolean) | undefined;
        timeupdate?: ((event: Event, view: EditorView) => boolean) | undefined;
        toggle?: ((event: Event, view: EditorView) => boolean) | undefined;
        touchcancel?: ((event: TouchEvent, view: EditorView) => boolean) | undefined;
        touchend?: ((event: TouchEvent, view: EditorView) => boolean) | undefined;
        touchmove?: ((event: TouchEvent, view: EditorView) => boolean) | undefined;
        touchstart?: ((event: TouchEvent, view: EditorView) => boolean) | undefined;
        transitioncancel?: ((event: TransitionEvent, view: EditorView) => boolean) | undefined;
        transitionend?: ((event: TransitionEvent, view: EditorView) => boolean) | undefined;
        transitionrun?: ((event: TransitionEvent, view: EditorView) => boolean) | undefined;
        transitionstart?: ((event: TransitionEvent, view: EditorView) => boolean) | undefined;
        volumechange?: ((event: Event, view: EditorView) => boolean) | undefined;
        waiting?: ((event: Event, view: EditorView) => boolean) | undefined;
        wheel?: ((event: WheelEvent, view: EditorView) => boolean) | undefined;
        copy?: ((event: ClipboardEvent, view: EditorView) => boolean) | undefined;
        cut?: ((event: ClipboardEvent, view: EditorView) => boolean) | undefined;
        paste?: ((event: ClipboardEvent, view: EditorView) => boolean) | undefined;
    };
}>;
export declare class PluginInstance {
    readonly value: PluginValue;
    readonly spec: ViewPlugin<any>;
    updateFunc: (update: ViewUpdate) => void;
    constructor(value: PluginValue, spec: ViewPlugin<any>);
    static create(spec: ViewPlugin<any>, view: EditorView): PluginInstance;
    takeField<T>(type: PluginField<T>, target: T[]): void;
    update(update: ViewUpdate): PluginInstance;
    destroy(view: EditorView): void;
    static dummy: PluginInstance;
}
export interface MeasureRequest<T> {
    key?: any;
    read(view: EditorView): T;
    write(measure: T, view: EditorView): void;
}
export declare const editorAttributes: Facet<Attrs, Attrs>;
export declare const contentAttributes: Facet<Attrs, Attrs>;
export declare const decorations: Facet<DecorationSet, readonly DecorationSet[]>;
export declare const styleModule: Facet<StyleModule<{}>, readonly StyleModule<{}>[]>;
export declare const enum UpdateFlag {
    Focus = 1,
    Height = 2,
    Viewport = 4,
    Oracle = 8,
    LineGaps = 16
}
export declare class ChangedRange {
    readonly fromA: number;
    readonly toA: number;
    readonly fromB: number;
    readonly toB: number;
    constructor(fromA: number, toA: number, fromB: number, toB: number);
    join(other: ChangedRange): ChangedRange;
    addToSet(set: ChangedRange[]): ChangedRange[];
    static extendWithRanges(diff: readonly ChangedRange[], ranges: number[]): readonly ChangedRange[];
}
export declare class ViewUpdate {
    readonly view: EditorView;
    readonly state: EditorState;
    readonly transactions: readonly Transaction[];
    readonly changes: ChangeSet;
    readonly prevState: EditorState;
    get viewportChanged(): boolean;
    get heightChanged(): boolean;
    get focusChanged(): boolean;
    get docChanged(): boolean;
    get selectionSet(): boolean;
}
//# sourceMappingURL=extension.d.ts.map