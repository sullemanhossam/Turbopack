import { EditorSelection, SelectionRange } from "@codemirror/next/state";
import { EditorView } from "./editorview";
import { ViewUpdate, PluginValue } from "./extension";
export declare class InputState {
    lastKeyCode: number;
    lastKeyTime: number;
    lastSelectionOrigin: string | null;
    lastSelectionTime: number;
    registeredEvents: string[];
    customHandlers: readonly {
        plugin: PluginValue;
        handlers: {
            [Type in keyof HTMLElementEventMap]?: (event: HTMLElementEventMap[Type], view: EditorView) => boolean;
        };
    }[];
    composing: boolean;
    compositionEndedAt: number;
    mouseSelection: MouseSelection | null;
    notifiedFocused: boolean;
    setSelectionOrigin(origin: string): void;
    constructor(view: EditorView);
    ensureHandlers(view: EditorView): void;
    runCustomHandlers(type: string, view: EditorView, event: Event): boolean;
    ignoreDuringComposition(event: Event): boolean;
    mustFlushObserver(event: Event): boolean;
    startMouseSelection(view: EditorView, event: MouseEvent, style: MouseSelectionStyle): void;
    update(update: ViewUpdate): void;
    destroy(): void;
}
export interface MouseSelectionStyle {
    get: (curEvent: MouseEvent, extend: boolean, multiple: boolean) => EditorSelection;
    update: (update: ViewUpdate) => void;
}
export declare type MakeSelectionStyle = (view: EditorView, event: MouseEvent) => MouseSelectionStyle | null;
declare class MouseSelection {
    private inputState;
    private view;
    private startEvent;
    private style;
    dragging: null | false | SelectionRange;
    dragMove: boolean;
    extend: boolean;
    multiple: boolean;
    constructor(inputState: InputState, view: EditorView, startEvent: MouseEvent, style: MouseSelectionStyle);
    move(event: MouseEvent): void;
    up(): void;
    destroy(): void;
    select(event: MouseEvent): void;
    update(update: ViewUpdate): void;
}
export {};
//# sourceMappingURL=input.d.ts.map