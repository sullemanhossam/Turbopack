export interface TextIterator extends Iterator<string> {
    next(skip?: number): this;
    value: string;
    done: boolean;
    lineBreak: boolean;
}
export declare abstract class Text implements Iterable<string> {
    abstract readonly length: number;
    abstract readonly lines: number;
    [Symbol.iterator]: () => Iterator<string>;
    lineAt(pos: number): Line;
    line(n: number): Line;
    replace(from: number, to: number, text: Text): Text;
    append(text: Text): Text;
    slice(from: number, to?: number): Text;
    abstract sliceString(from: number, to?: number, lineSep?: string): string;
    eq(other: Text): boolean;
    iter(dir?: 1 | -1): TextIterator;
    iterRange(from: number, to?: number): TextIterator;
    iterLines(from?: number): TextIterator;
    static of(text: readonly string[]): Text;
    static empty: Text;
}
export declare class Line {
    readonly from: number;
    readonly to: number;
    readonly number: number;
    get length(): number;
    slice(from?: number, to?: number): string;
    findClusterBreak(start: number, forward: boolean): number;
}
//# sourceMappingURL=text.d.ts.map