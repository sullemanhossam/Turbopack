import { Stack } from "./stack";
export declare class Token {
    start: number;
    value: number;
    end: number;
    accept(value: number, end: number): void;
}
export interface InputStream {
    length: number;
    get(pos: number): number;
    read(from: number, to: number): string;
    clip(at: number): InputStream;
}
export declare class StringStream implements InputStream {
    readonly string: string;
    readonly length: number;
    constructor(string: string, length?: number);
    get(pos: number): number;
    read(from: number, to: number): string;
    clip(at: number): StringStream;
}
export interface Tokenizer {
    token(input: InputStream, token: Token, stack: Stack): void;
    contextual: boolean;
}
export declare class TokenGroup implements Tokenizer {
    readonly data: Readonly<Uint16Array>;
    readonly id: number;
    contextual: boolean;
    constructor(data: Readonly<Uint16Array>, id: number);
    token(input: InputStream, token: Token, stack: Stack): void;
}
export declare class ExternalTokenizer {
    readonly token: (input: InputStream, token: Token, stack: Stack) => void;
    contextual: boolean;
    constructor(token: (input: InputStream, token: Token, stack: Stack) => void, options?: {
        contextual?: boolean;
    });
}
