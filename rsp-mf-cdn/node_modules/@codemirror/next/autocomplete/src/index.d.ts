import { EditorView, Command } from "@codemirror/next/view";
import { Extension, EditorState } from "@codemirror/next/state";
import { KeyBinding } from "@codemirror/next/view";
export declare enum FilterType {
    Start = 0,
    Include = 1,
    Fuzzy = 2
}
export declare class AutocompleteContext {
    readonly state: EditorState;
    readonly pos: number;
    readonly explicit: boolean;
    readonly filterType: FilterType;
    readonly caseSensitive: boolean;
    filter(completion: string, text: string, caseSensitive?: boolean): boolean;
    tokenBefore(): {
        from: number;
        to: number;
        text: string;
        type: import("lezer-tree").NodeType | null;
    };
}
export interface CompletionResult {
    from: number;
    to: number;
    options: readonly Completion[];
    filterDownOn?: RegExp;
}
export interface Completion {
    label: string;
    apply?: string | ((view: EditorView, result: CompletionResult, completion: Completion) => void);
}
export declare type Autocompleter = (context: AutocompleteContext) => CompletionResult | null | Promise<CompletionResult | null>;
interface AutocompleteConfig {
    activateOnTyping?: boolean;
    override?: Autocompleter | null;
    filterType?: FilterType;
    caseSensitive?: boolean;
}
export declare function autocomplete(config?: AutocompleteConfig): Extension;
export declare const startCompletion: Command;
export declare const closeCompletion: Command;
export declare const autocompleteKeymap: readonly KeyBinding[];
export declare function completeFromList(list: readonly (string | Completion)[]): Autocompleter;
export { snippet, completeSnippets, SnippetSpec } from "./snippet";
//# sourceMappingURL=index.d.ts.map