{"version":3,"file":"index.js","sources":["../src/css.js"],"sourcesContent":["import { parser } from \"lezer-css\";\nimport { LezerSyntax, continuedIndent, indentNodeProp, foldNodeProp } from \"@codemirror/next/syntax\";\nimport { styleTags } from \"@codemirror/next/highlight\";\n/// A syntax provider based on the [Lezer CSS\n/// parser](https://github.com/lezer-parser/css), extended with\n/// highlighting and indentation information.\nexport const cssSyntax = new LezerSyntax(parser.withProps(indentNodeProp.add({\n    Declaration: continuedIndent()\n}), foldNodeProp.add({\n    Block(subtree) { return { from: subtree.start + 1, to: subtree.end - 1 }; }\n}), styleTags({\n    \"import charset namespace keyframes\": \"keyword definition\",\n    \"media supports\": \"keyword control\",\n    \"from to\": \"keyword\",\n    NamespaceName: \"namespace\",\n    KeyframeName: \"labelName\",\n    TagName: \"typeName\",\n    ClassName: \"className\",\n    PseudoClassName: \"className constant\",\n    not: \"operatorKeyword\",\n    IdName: \"labelName\",\n    AttributeName: \"propertyName\",\n    NumberLiteral: \"number\",\n    PropertyName: \"propertyName\",\n    KeywordQuery: \"keyword\",\n    FeatureName: \"propertyName\",\n    UnaryQueryOp: \"operatorKeyword\",\n    callee: \"keyword\",\n    ValueName: \"atom\",\n    CallTag: \"atom\",\n    Callee: \"variableName\",\n    Unit: \"unit\",\n    \"UniversalSelector NestingSelector\": \"operator definition\",\n    AtKeyword: \"keyword\",\n    MatchOp: \"compareOperator\",\n    \"ChildOp SiblingOp, LogicOp\": \"logicOperator\",\n    BinOp: \"arithmeticOperator\",\n    Important: \"modifier\",\n    Comment: \"blockComment\",\n    ParenthesizedContent: \"name#2\",\n    ColorLiteral: \"color\",\n    StringLiteral: \"string\",\n    \":\": \"punctuation definition\",\n    \"PseudoOp #\": \"derefOperator\",\n    \"; ,\": \"separator\",\n    \"( )\": \"paren\",\n    \"[ ]\": \"squareBracket\",\n    \"{ }\": \"brace\"\n})), {\n    languageData: {\n        commentTokens: { block: { open: \"/*\", close: \"*/\" } }\n    }\n});\n/// Returns an extension that installs the CSS syntax provider.\nexport function css() {\n    return cssSyntax;\n}\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AACY,MAAC,SAAS,GAAG,IAAI,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,GAAG,CAAC;AAC7E,IAAI,WAAW,EAAE,eAAe,EAAE;AAClC,CAAC,CAAC,EAAE,YAAY,CAAC,GAAG,CAAC;AACrB,IAAI,KAAK,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,KAAK,GAAG,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,EAAE;AAC/E,CAAC,CAAC,EAAE,SAAS,CAAC;AACd,IAAI,oCAAoC,EAAE,oBAAoB;AAC9D,IAAI,gBAAgB,EAAE,iBAAiB;AACvC,IAAI,SAAS,EAAE,SAAS;AACxB,IAAI,aAAa,EAAE,WAAW;AAC9B,IAAI,YAAY,EAAE,WAAW;AAC7B,IAAI,OAAO,EAAE,UAAU;AACvB,IAAI,SAAS,EAAE,WAAW;AAC1B,IAAI,eAAe,EAAE,oBAAoB;AACzC,IAAI,GAAG,EAAE,iBAAiB;AAC1B,IAAI,MAAM,EAAE,WAAW;AACvB,IAAI,aAAa,EAAE,cAAc;AACjC,IAAI,aAAa,EAAE,QAAQ;AAC3B,IAAI,YAAY,EAAE,cAAc;AAChC,IAAI,YAAY,EAAE,SAAS;AAC3B,IAAI,WAAW,EAAE,cAAc;AAC/B,IAAI,YAAY,EAAE,iBAAiB;AACnC,IAAI,MAAM,EAAE,SAAS;AACrB,IAAI,SAAS,EAAE,MAAM;AACrB,IAAI,OAAO,EAAE,MAAM;AACnB,IAAI,MAAM,EAAE,cAAc;AAC1B,IAAI,IAAI,EAAE,MAAM;AAChB,IAAI,mCAAmC,EAAE,qBAAqB;AAC9D,IAAI,SAAS,EAAE,SAAS;AACxB,IAAI,OAAO,EAAE,iBAAiB;AAC9B,IAAI,4BAA4B,EAAE,eAAe;AACjD,IAAI,KAAK,EAAE,oBAAoB;AAC/B,IAAI,SAAS,EAAE,UAAU;AACzB,IAAI,OAAO,EAAE,cAAc;AAC3B,IAAI,oBAAoB,EAAE,QAAQ;AAClC,IAAI,YAAY,EAAE,OAAO;AACzB,IAAI,aAAa,EAAE,QAAQ;AAC3B,IAAI,GAAG,EAAE,wBAAwB;AACjC,IAAI,YAAY,EAAE,eAAe;AACjC,IAAI,KAAK,EAAE,WAAW;AACtB,IAAI,KAAK,EAAE,OAAO;AAClB,IAAI,KAAK,EAAE,eAAe;AAC1B,IAAI,KAAK,EAAE,OAAO;AAClB,CAAC,CAAC,CAAC,EAAE;AACL,IAAI,YAAY,EAAE;AAClB,QAAQ,aAAa,EAAE,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE;AAC7D,KAAK;AACL,CAAC,EAAE;AACH;AACO,SAAS,GAAG,GAAG;AACtB,IAAI,OAAO,SAAS,CAAC;AACrB;;;;"}