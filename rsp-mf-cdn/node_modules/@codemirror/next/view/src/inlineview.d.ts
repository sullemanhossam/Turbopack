import { Text } from "@codemirror/next/text";
import { ContentView, DOMPos } from "./contentview";
import { WidgetType } from "./decoration";
import { Rect } from "./dom";
export declare abstract class InlineView extends ContentView {
    abstract merge(from: number, to?: number, source?: InlineView | null): boolean;
    match(_other: InlineView): boolean;
    get children(): any[];
    abstract slice(from: number, to?: number): InlineView;
    getSide(): number;
}
export declare class TextView extends InlineView {
    text: string;
    tagName: string | null;
    attrs: {
        [key: string]: string;
    } | null;
    textDOM: Node | null;
    class: string | null;
    constructor(text: string, tagName: string | null, clss: string | null, attrs: {
        [key: string]: string;
    } | null);
    get length(): number;
    createDOM(textDOM?: Node): void;
    sync(): void;
    reuseDOM(dom: Node): boolean;
    merge(from: number, to?: number, source?: InlineView | null): boolean;
    slice(from: number, to?: number): TextView;
    localPosFromDOM(node: Node, offset: number): number;
    domAtPos(pos: number): DOMPos;
    domBoundsAround(_from: number, _to: number, offset: number): {
        from: number;
        to: number;
        startDOM: Node | null;
        endDOM: ChildNode | null;
    };
    coordsAt(pos: number, side: number): Rect;
}
export declare class WidgetView extends InlineView {
    widget: WidgetType;
    length: number;
    readonly side: number;
    readonly open: number;
    dom: HTMLElement | null;
    static create(widget: WidgetType, length: number, side: number, open?: number): WidgetView;
    constructor(widget: WidgetType, length: number, side: number, open: number);
    slice(from: number, to?: number): WidgetView;
    sync(): void;
    getSide(): number;
    merge(from: number, to?: number, source?: InlineView | null): boolean;
    match(other: InlineView): boolean;
    ignoreMutation(): boolean;
    ignoreEvent(event: Event): boolean;
    get overrideDOMText(): Text | null;
    domAtPos(pos: number): DOMPos;
    domBoundsAround(): null;
    coordsAt(pos: number, _side: number): Rect | null;
}
export declare class CompositionView extends WidgetView {
    domAtPos(pos: number): DOMPos;
    sync(): void;
    localPosFromDOM(node: Node, offset: number): number;
    ignoreMutation(): boolean;
    get overrideDOMText(): null;
    coordsAt(pos: number, side: number): Rect;
}
//# sourceMappingURL=inlineview.d.ts.map