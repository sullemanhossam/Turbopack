import { StackContext } from "./parse";
import { Tree, TreeBuffer } from "lezer-tree";
export declare class Stack {
    readonly cx: StackContext;
    readonly stack: number[];
    state: number;
    reducePos: number;
    pos: number;
    recovered: number;
    readonly buffer: number[];
    readonly bufferBase: number;
    readonly parent: Stack | null;
    constructor(cx: StackContext, stack: number[], state: number, reducePos: number, pos: number, recovered: number, buffer: number[], bufferBase: number, parent: Stack | null);
    toString(): string;
    static start(cx: StackContext, state: number, pos?: number): Stack;
    pushState(state: number, start: number): void;
    reduce(action: number): void;
    storeNode(term: number, start: number, end: number, size?: number, isReduce?: boolean): void;
    shift(action: number, next: number, nextEnd: number): void;
    apply(action: number, next: number, nextEnd: number): void;
    useNode(value: Tree | TreeBuffer, next: number): void;
    split(): Stack;
    recoverByDelete(next: number, nextEnd: number): void;
    canShift(term: number): boolean;
    get ruleStart(): number;
    startOf(types: readonly number[]): number;
    recoverByInsert(next: number): Stack[];
    forceReduce(): boolean;
    forceAll(): this;
    toTree(): Tree;
}
export declare const enum Recover {
    Token = 2,
    Reduce = 1,
    MaxNext = 4
}
