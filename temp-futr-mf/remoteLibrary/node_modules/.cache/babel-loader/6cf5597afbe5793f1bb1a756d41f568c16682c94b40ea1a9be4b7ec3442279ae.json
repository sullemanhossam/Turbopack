{"ast":null,"code":"function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Secondary } from \"../story/Button.stories\";\nimport clsx from \"clsx\";\nimport TailwindWrapper from \"../../tailwind.wrapper\";\n\n/**\n * Primary UI component for user interaction\n */\nexport const Button = ({\n  primary,\n  backgroundColor,\n  size,\n  label,\n  ...props\n}) => {\n  // const mode = primary ? \"storybook-button--primary\" : \"storybook-button--secondary\";\n  const getButtonSize = size => {\n    switch (size) {\n      // shorthands are added to speed up stuff\n      case \"small\" || \"md\":\n        return \"size-sm\";\n      case \"large || lg\":\n        return \"size-lg\";\n      default:\n        return \"size-md\";\n    }\n  };\n  const base = \"rounded-md bg-black px-3.5 py-2.5 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50\";\n  const styles = clsx({\n    \"bg-white\": primary\n  }, getButtonSize, base);\n  return /*#__PURE__*/React.createElement(\"button\", _extends({\n    style: {\n      backgroundColor: \"green\"\n    },\n    type: \"button\",\n    className: base\n  }, props), label);\n};\nButton.propTypes = {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  primary: PropTypes.bool,\n  /**\n   * What background color to use\n   */\n  backgroundColor: PropTypes.string,\n  /**\n   * How large should the button be?\n   */\n  size: PropTypes.oneOf([\"small\", \"medium\", \"large\"]),\n  /**\n   * Button contents\n   */\n  label: PropTypes.string.isRequired,\n  /**\n   * Optional click handler\n   */\n  onClick: PropTypes.func\n};\nButton.defaultProps = {\n  backgroundColor: null,\n  primary: false,\n  size: \"medium\",\n  onClick: undefined\n};\nexport default (props => {\n  return /*#__PURE__*/React.createElement(TailwindWrapper, null, /*#__PURE__*/React.createElement(Button, props));\n});\n// exporting default will add tailwind otherwise it will not be specified within the app and up to the client","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}