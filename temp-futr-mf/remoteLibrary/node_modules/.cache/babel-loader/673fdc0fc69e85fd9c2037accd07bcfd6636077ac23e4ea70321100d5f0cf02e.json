{"ast":null,"code":"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Secondary } from \"../story/Button.stories\";\nimport clsx from \"clsx\";\nimport TailwindWrapper from \"../../tailwind.wrapper\";\n\n/**\n * Primary UI component for user interaction\n */\nexport const Button = ({\n  primary,\n  backgroundColor,\n  size,\n  label,\n  ...props\n}) => {\n  // const mode = primary ? \"storybook-button--primary\" : \"storybook-button--secondary\";\n  const getButtonSize = size => {\n    switch (size) {\n      case \"small\":\n        return \"size-sm\";\n      case \"large\":\n        return \"size-lg\";\n      default:\n        return \"size-md\";\n    }\n  };\n  const base = \"rounded-md bg-black px-3.5 py-2.5 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50\";\n  const styles = clsx({\n    \"bg-white\": primary\n  }, getButtonSize, base);\n  return (\n    /*#__PURE__*/\n    // <button\n    //   type=\"button\"\n    //   className={['storybook-button', `storybook-button--${size}`, mode].join(' ')}\n    //   style={backgroundColor && { backgroundColor }}\n    //   {...props}\n    // >\n    //   {label}\n    // </button>\n    React.createElement(\"button\", {\n      type: \"button\",\n      className: \"m-3 w-40 h-20 rounded-lg border-2 border-sky-600 text-white hover:bg-sky-600 transition ease-linear hover:scale-105\"\n    }, \"Button text\")\n  );\n};\nButton.propTypes = {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  primary: PropTypes.bool,\n  /**\n   * What background color to use\n   */\n  backgroundColor: PropTypes.string,\n  /**\n   * How large should the button be?\n   */\n  size: PropTypes.oneOf([\"small\", \"medium\", \"large\"]),\n  /**\n   * Button contents\n   */\n  label: PropTypes.string.isRequired,\n  /**\n   * Optional click handler\n   */\n  onClick: PropTypes.func\n};\nButton.defaultProps = {\n  backgroundColor: null,\n  primary: false,\n  size: \"medium\",\n  onClick: undefined\n};\nexport default (() => {\n  return /*#__PURE__*/React.createElement(TailwindWrapper, null, /*#__PURE__*/React.createElement(Button, null));\n});\n\n// export {default} from  '../button'","map":{"version":3,"names":["React","PropTypes","Secondary","clsx","TailwindWrapper","Button","primary","backgroundColor","size","label","props","getButtonSize","base","styles","createElement","type","className","propTypes","bool","string","oneOf","isRequired","onClick","func","defaultProps","undefined"],"sources":["/Users/sullemanhossam/Desktop/Turbopack/temp-futr-mf/remoteLibrary/src/components/Button.jsx"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Secondary } from \"../story/Button.stories\";\nimport clsx from \"clsx\";\nimport TailwindWrapper from \"../../tailwind.wrapper\";\n\n/**\n * Primary UI component for user interaction\n */\nexport const Button = ({ primary, backgroundColor, size, label, ...props }) => {\n  // const mode = primary ? \"storybook-button--primary\" : \"storybook-button--secondary\";\n  const getButtonSize = (size) => {\n    switch (size) {\n      case \"small\":\n        return \"size-sm\";\n      case \"large\":\n        return \"size-lg\";\n      default:\n        return \"size-md\";\n    }\n  };\n\n  const base = \"rounded-md bg-black px-3.5 py-2.5 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50\";\n  const styles = clsx({ \"bg-white\": primary }, getButtonSize, base);\n  return (\n    // <button\n    //   type=\"button\"\n    //   className={['storybook-button', `storybook-button--${size}`, mode].join(' ')}\n    //   style={backgroundColor && { backgroundColor }}\n    //   {...props}\n    // >\n    //   {label}\n    // </button>\n    <button\n      type=\"button\"\n      className={\"m-3 w-40 h-20 rounded-lg border-2 border-sky-600 text-white hover:bg-sky-600 transition ease-linear hover:scale-105\"}\n    >\n      Button text\n    </button>\n  );\n};\n\nButton.propTypes = {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  primary: PropTypes.bool,\n  /**\n   * What background color to use\n   */\n  backgroundColor: PropTypes.string,\n  /**\n   * How large should the button be?\n   */\n  size: PropTypes.oneOf([\"small\", \"medium\", \"large\"]),\n  /**\n   * Button contents\n   */\n  label: PropTypes.string.isRequired,\n  /**\n   * Optional click handler\n   */\n  onClick: PropTypes.func,\n};\n\nButton.defaultProps = {\n  backgroundColor: null,\n  primary: false,\n  size: \"medium\",\n  onClick: undefined,\n};\n\nexport default () => {\n  return (\n    <TailwindWrapper>\n      <Button />\n    </TailwindWrapper>\n  );\n};\n\n// export {default} from  '../button'\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,SAAS,QAAQ,yBAAyB;AACnD,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,eAAe,MAAM,wBAAwB;;AAEpD;AACA;AACA;AACA,OAAO,MAAMC,MAAM,GAAGA,CAAC;EAAEC,OAAO;EAAEC,eAAe;EAAEC,IAAI;EAAEC,KAAK;EAAE,GAAGC;AAAM,CAAC,KAAK;EAC7E;EACA,MAAMC,aAAa,GAAIH,IAAI,IAAK;IAC9B,QAAQA,IAAI;MACV,KAAK,OAAO;QACV,OAAO,SAAS;MAClB,KAAK,OAAO;QACV,OAAO,SAAS;MAClB;QACE,OAAO,SAAS;IACpB;EACF,CAAC;EAED,MAAMI,IAAI,GAAG,kIAAkI;EAC/I,MAAMC,MAAM,GAAGV,IAAI,CAAC;IAAE,UAAU,EAAEG;EAAQ,CAAC,EAAEK,aAAa,EAAEC,IAAI,CAAC;EACjE;IAAA;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAZ,KAAA,CAAAc,aAAA;MACEC,IAAI,EAAC,QAAQ;MACbC,SAAS,EAAE;IAAsH,GAClI,aAEO;EAAC;AAEb,CAAC;AAEDX,MAAM,CAACY,SAAS,GAAG;EACjB;AACF;AACA;EACEX,OAAO,EAAEL,SAAS,CAACiB,IAAI;EACvB;AACF;AACA;EACEX,eAAe,EAAEN,SAAS,CAACkB,MAAM;EACjC;AACF;AACA;EACEX,IAAI,EAAEP,SAAS,CAACmB,KAAK,CAAC,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;EACnD;AACF;AACA;EACEX,KAAK,EAAER,SAAS,CAACkB,MAAM,CAACE,UAAU;EAClC;AACF;AACA;EACEC,OAAO,EAAErB,SAAS,CAACsB;AACrB,CAAC;AAEDlB,MAAM,CAACmB,YAAY,GAAG;EACpBjB,eAAe,EAAE,IAAI;EACrBD,OAAO,EAAE,KAAK;EACdE,IAAI,EAAE,QAAQ;EACdc,OAAO,EAAEG;AACX,CAAC;AAED,gBAAe,MAAM;EACnB,oBACEzB,KAAA,CAAAc,aAAA,CAACV,eAAe,qBACdJ,KAAA,CAAAc,aAAA,CAACT,MAAM,MAAE,CACM,CAAC;AAEtB,CAAC;;AAED","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}