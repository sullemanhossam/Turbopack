{"version":3,"file":"storybook-Button-stories.684738530c018d1f5379.hot-update.js","mappings":";;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AAAA;AACA;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAGA;AAEA;AACA;;AAEA;AAEA;;AAEA;AAEA;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AAEA;;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;AAGA","sources":["webpack://federated-library-from-cdn-remote-cdn/./node_modules/clsx/dist/clsx.mjs","webpack://federated-library-from-cdn-remote-cdn/./src/components/Button.jsx"],"sourcesContent":["function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f)}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}export function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Secondary } from \"../storybook/Button.stories\";\nimport clsx from \"clsx\";\nimport TailwindWrapper from \"../../tailwind.wrapper\";\n\n/**\n * Primary UI component for user interaction\n */\nexport const Button = ({ primary, backgroundColor, size, label, ...props }) => {\n  // const mode = primary ? \"storybook-button--primary\" : \"storybook-button--secondary\";\n  const getButtonSize = (size) => {\n    switch (size) {\n      // shorthands are added to speed up stuff\n      case \"small\" || \"md\":\n        return \"size-sm\";\n      case \"large || lg\":\n        return \"size-lg\";\n      default:\n        return \"size-md\";\n    }\n  };\n\n  const base = \"px-4 py-2 bg-white text-green-500 hover:bg-green-600 hover:text-white rounded-md transition-colors\";\n  const styles = clsx({ \"bg-white\": primary }, getButtonSize, base);\n  return (\n    <>\n      <button type=\"button\" className={base} {...props}>\n        {label}\n      </button>\n      <p style={{ color: \"green\" }}>hello</p>\n    </>\n  );\n};\n\nButton.propTypes = {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  primary: PropTypes.bool,\n  /**\n   * What background color to use\n   */\n  backgroundColor: PropTypes.string,\n  /**\n   * How large should the button be?\n   */\n  size: PropTypes.oneOf([\"small\", \"medium\", \"large\"]),\n  /**\n   * Button contents\n   */\n  label: PropTypes.string.isRequired,\n  /**\n   * Optional click handler\n   */\n  onClick: PropTypes.func,\n};\n\nButton.defaultProps = {\n  backgroundColor: null,\n  primary: false,\n  size: \"medium\",\n  onClick: undefined,\n};\n\nexport default (props) => {\n  return (\n    <TailwindWrapper>\n      <Button {...props} />\n    </TailwindWrapper>\n  );\n};\n// exporting default will add tailwind otherwise it will not be specified within the app and up to the client\n"],"names":[],"sourceRoot":""}